class Node:
    def __init__(self, head):
        self.head = head
        self.next = None
    
    def show_node(self):
        print(self.head, end="->")
    
class ListaEncadeada:
    def __init__(self):
        self.head = None

    def insert(self, head):
        new = Node(head) #Cria um novo N√≥
        if self.head is None: # Se a lista estiver vazia, crie o primeiro n√≥
            self.head = new
        else:
            current = self.head #come√ßa pelo primeiro n√≥
            while current.next is not None: #percorre at√© o √∫ltimo n√≥ 
                current = current.next
            current.next = new #insere o novo n√≥ no final
    
    def showNumber(self):
        current = self.head
        while current is not None:
            print(current.head, end="->" if current.next else "")
            current = current.next
        print("\n")
    
    def delete_alternate(self):
        if self.head is None:
            return #Se a lista estiver vazia, n√£o faz nada
        
        self.head = self.head.next #remove o primeiro n√≥
        
        current = self.head
        while current is not None and current.next is not None:
            current.next = current.next.next #Remove o pr√≥ximo do pr√≥ximo n√≥ 
            current = current.next #avan√ßa para o pr√≥ximo n√≥

teste = ListaEncadeada()
teste.insert(8)
teste.insert(6)
teste.insert(1)
teste.insert(3)
teste.insert(5)
teste.insert(2)

teste.showNumber()
teste.delete_alternate()
teste.showNumber()

"""
Escolha da Estrutura: Lista Duplamente Encadeada

A estrutura escolhida para implementar o Deque foi a **Lista Duplamente Encadeada**, pois 
permite inser√ß√µes e remo√ß√µes eficientes tanto no in√≠cio quanto no final da fila.  
Cada n√≥ cont√©m um ponteiro para o pr√≥ximo elemento (`next`) e um para o anterior (`prev`), 
o que facilita opera√ß√µes nos dois extremos sem a necessidade de percorrer toda a estrutura.

üìå **Vantagens dessa abordagem**:
- **Efici√™ncia**: Inser√ß√µes e remo√ß√µes nos extremos ocorrem em O(1), sem deslocamento de elementos.
- **Flexibilidade**: Cresce e encolhe dinamicamente sem necessidade de aloca√ß√£o fixa de mem√≥ria.
- **Acesso direto ao √∫ltimo elemento**: Diferente da lista simplesmente encadeada, podemos remover 
  o √∫ltimo elemento diretamente sem percorrer toda a lista.

Essa abordagem √© ideal para situa√ß√µes onde h√° a necessidade frequente de adicionar e remover 
elementos tanto no in√≠cio quanto no final da fila, como em filas de atendimento e buffers de comunica√ß√£o.

"""
