import time


# Implementa√ß√£o Recursiva Simples (Ineficiente)
def fibonacci_recursivo(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    return fibonacci_recursivo(n - 1) + fibonacci_recursivo(n - 2)

def fibonacci_memoizado(n, memo={}):
    if n in memo:
        return memo[n]
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    memo[n] = fibonacci_memoizado(n - 1, memo) + fibonacci_memoizado(n - 2, memo)
    return memo[n]

# Implementa√ß√£o Iterativa (Mais Eficiente)
# Diferente da recursiva, essa abordagem usa um la√ßo de repeti√ß√£o para calcular Fibonacci sem precisar empilhar chamadas na mem√≥ria.
def fibonacci_iterativo(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    
    anterior, atual = 0, 1
    for _ in range(2, n + 1):
        novo = anterior + atual
        anterior, atual = atual, novo
    return atual

# Vamos testar as tr√™s abordagens para ver suas diferen√ßas de desempenho
n = 35  # Testamos com 35 pois valores muito altos podem travar a recurs√£o sem memoiza√ß√£o

inicio = time.time()
print(f"Fibonacci Recursivo Simples ({n}):", fibonacci_recursivo(n))
print("Tempo:", time.time() - inicio, "segundos")

inicio = time.time()
print(f"Fibonacci Recursivo com Memoiza√ß√£o ({n}):", fibonacci_memoizado(n))
print("Tempo:", time.time() - inicio, "segundos")

inicio = time.time()
print(f"Fibonacci Iterativo ({n}):", fibonacci_iterativo(n))
print("Tempo:", time.time() - inicio, "segundos")

"""
üìå Compara√ß√£o de Efici√™ncia:

1Ô∏è‚É£ **Recursivo Simples:** 
   - Complexidade: O(2‚Åø) ‚Üí Muito ineficiente para valores grandes.
   - Problema: Muitos c√°lculos repetidos tornam a execu√ß√£o lenta.
   - Exemplo: fibonacci(35) j√° demora bastante tempo.

2Ô∏è‚É£ **Recursivo com Memoiza√ß√£o:**
   - Complexidade: O(n) ‚Üí Muito mais eficiente.
   - Solu√ß√£o: Armazena valores j√° calculados para evitar recalcular.
   - Resultado: Reduz drasticamente o tempo de execu√ß√£o.

3Ô∏è‚É£ **Iterativo:**
   - Complexidade: O(n), igual ao memoizado.
   - Diferen√ßa: Usa um loop e ocupa menos mem√≥ria (n√£o usa pilha de chamadas).
   - Melhor escolha para aplica√ß√µes reais!

üéØ **Melhoria Proposta:**
   - Podemos usar **Matriz de Transforma√ß√£o** para calcular Fibonacci em O(log n), usando exponencia√ß√£o de matrizes.
   - Outra abordagem √© **N√∫mero de Ouro (œÜ)** para obter um valor aproximado de Fibonacci
"""