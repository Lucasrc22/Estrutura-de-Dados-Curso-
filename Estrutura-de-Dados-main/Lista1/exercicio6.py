def torres_de_hanoi(n, origem, destino, auxiliar):
    """
    Resolve o problema das Torres de Hanoi de forma recursiva.

    Par√¢metros:
    n        -> n√∫mero de discos a serem movidos
    origem   -> torre de onde os discos come√ßam
    destino  -> torre para onde os discos devem ser movidos
    auxiliar -> torre auxiliar usada durante o processo
    """

    if n == 1:
        print(f"Mova o disco {n} de {origem} para {destino}")
        return
    
    torres_de_hanoi(n - 1, origem, auxiliar, destino)
    
    print(f"Mova o disco {n} de {origem} para {destino}")
    
    torres_de_hanoi(n - 1, auxiliar, destino, origem)

# Testando com 5 discos
n = 3
torres_de_hanoi(n, "A", "C", "B")

"""
üìå Estrat√©gia da Recurs√£o:

O problema das Torres de Hanoi segue a seguinte estrat√©gia:

1Ô∏è‚É£ Se tivermos **apenas 1 disco**, movemos diretamente da **origem** para o **destino**.
2Ô∏è‚É£ Se tivermos **mais de 1 disco**:
   - Movemos **n-1 discos** da origem para a torre auxiliar.
   - Movemos o **maior disco (n)** diretamente para o destino.
   - Movemos os **n-1 discos** da torre auxiliar para o destino.

üî¢ Complexidade:
- O n√∫mero total de movimentos necess√°rios segue a f√≥rmula: **2‚Åø - 1**.
- Isso significa que o tempo de execu√ß√£o √© **O(2‚Åø)**, ou seja, cresce exponencialmente.

üßê Existe uma abordagem iterativa?

Sim, mas n√£o √© t√£o simples quanto a recursiva. Podemos usar uma pilha para simular o comportamento da recurs√£o. Por√©m, essa abordagem **√© mais dif√≠cil de implementar** e geralmente n√£o √© usada, pois a recursiva j√° reflete a estrutura natural do problema.

üéØ Conclus√£o:
- A abordagem recursiva √© **intuitiva** e reflete bem o problema.
- A solu√ß√£o iterativa exige **mais controle sobre os movimentos** e √© menos pr√°tica.
- Para **valores grandes de n**, a complexidade **exponencial** torna a solu√ß√£o invi√°vel em termos de tempo.

"""
